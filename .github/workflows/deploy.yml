# GitHub Actions CI/CD Pipeline for ModPorter AI
# Day 6: Production deployment automation

name: Deploy ModPorter AI

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: modporter_test
        options: >-
          --health-cmd "pg_isready -U postgres -d modporter_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

    - name: Cache Node dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

    - name: Install pnpm
      run: |
        npm install -g pnpm@9.12.3

    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install AI engine dependencies
      run: |
        cd ai-engine
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile

    # Install system dependencies for health checks
    - name: Install system dependencies
      run: |
        echo "🔧 Installing system dependencies..."
        sudo apt-get update -qq
        sudo apt-get install -y -qq netcat-traditional netcat-openbsd curl

    - name: Wait for services to be ready
      run: |
        echo "🔍 Checking service connectivity..."
        
        echo "Testing Redis connectivity..."
        timeout 60 bash -c 'until echo "PING" | nc localhost 6379 | grep -q PONG; do echo "Waiting for Redis..."; sleep 2; done'
        echo "✅ Redis is ready"
        
        echo "Testing PostgreSQL connectivity..."
        timeout 60 bash -c 'until nc -z localhost 5432; do echo "Waiting for PostgreSQL..."; sleep 2; done'
        echo "✅ PostgreSQL is ready"

    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/modporter_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test_secret_key
        JWT_SECRET_KEY: test_jwt_secret
      run: |
        cd backend
        python -m pytest tests/ -v --cov=src --cov-report=xml

    - name: Run AI engine tests
      env:
        REDIS_URL: redis://localhost:6379
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        cd ai-engine
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Run frontend tests
      run: |
        cd frontend
        pnpm test:ci

    - name: Frontend type check
      run: |
        cd frontend
        npx tsc --noEmit

    - name: Frontend lint check
      run: |
        cd frontend
        pnpm lint

    - name: Build frontend
      run: |
        cd frontend
        pnpm build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        files: ./backend/coverage.xml,./ai-engine/coverage.xml

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        version: 'latest'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter (Backend)
      run: |
        pip install bandit
        bandit -r backend/src/ -f json -o bandit-backend.json || true

    - name: Run Bandit security linter (AI Engine)
      run: |
        bandit -r ai-engine/ -f json -o bandit-ai.json || true

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3

    - name: Build and push Frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        push: true
        tags: |
          modporter/frontend:latest
          modporter/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        push: true
        tags: |
          modporter/backend:latest
          modporter/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push AI Engine image
      uses: docker/build-push-action@v6
      with:
        context: ./ai-engine
        push: true
        tags: |
          modporter/ai-engine:latest
          modporter/ai-engine:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to production server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      run: |
        # Copy deployment files to server
        scp -r . $SERVER_USER@$SERVER_HOST:/opt/modporter-ai/

        # Deploy on server
        ssh $SERVER_USER@$SERVER_HOST << 'EOF'
          cd /opt/modporter-ai
          
          # Update environment variables
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env.prod
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env.prod
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.prod
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env.prod
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env.prod
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env.prod
          
          # Run deployment script
          ./scripts/deploy.sh production
        EOF

    - name: Run health checks
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Check service health
        curl -f http://${{ secrets.SERVER_HOST }}/api/v1/health
        curl -f http://${{ secrets.SERVER_HOST }}:8001/api/v1/health
        curl -f http://${{ secrets.SERVER_HOST }}/health

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/production'
    needs: [deploy]
    environment: production

    steps:
    - name: Rollback deployment
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        ssh $SERVER_USER@$SERVER_HOST << 'EOF'
          cd /opt/modporter-ai
          
          # Rollback to previous version
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
        EOF